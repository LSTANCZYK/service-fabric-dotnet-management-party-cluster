{
  "$schema": "http://schema.management.azure.com/schemas/2014-04-01-preview/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "clusterLocation": {
      "type": "string",
      "allowedValues": [ "westus", "eastus" ],
      "defaultValue": "westus",
      "metadata": {"description": "Location of the Cluster"}
    },
    "clusterName": {
      "type": "string",
      "metadata": {"description": "Name of your cluster - Between 3 and 23 characters.  Lowercase letters and numbers  "}
    },
     "adminUserName": {
      "type": "string",
       "metadata": {"description": "Remote Desktop User ID for the VMs that make up this cluster"}
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {"description": "Remote Desktop User password for the VMs that make up this cluster"}
    },
    "vmSize": {
      "type": "string",
      "allowedValues": [
        "Standard_A0",
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A9",
        "Standard_A10",
        "Standard_A11",
        "Standard_D1",
        "Standard_D2",
        "Standard_D3",
        "Standard_D4",
        "Standard_D11",
        "Standard_D12",
        "Standard_D13",
        "Standard_D14",
        "Standard_DS1",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS11",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14"
      ],
      "defaultValue": "Standard_D2",
  "metadata": {"description": "Size of the VMs for this Node Type"}
    },
     "fabricTcpGatewayPort": {
      "type": "int",
      "defaultValue": 19000,
      "metadata": {"description": " TCP Client Connection end point to perform management operations on this cluster"}
    },
    "fabricHttpGatewayPort": {
      "type": "int",
      "defaultValue": 19080,
      "metadata": { "description": " Http Client Connection end point to perform management operations on this cluster" }
    },
    "loadBalancedAppPort1": {
      "type": "int",
      "defaultValue": 80, 
       "metadata": { "description": "Application Port - Load balanced port that that your application needs " }
    },
    "loadBalancedAppPort2": {
      "type": "int",
      "defaultValue": 8505, 
       "metadata": { "description": "Application Port - Load balanced port that that your application needs " }
    },
    "loadBalancedAppPort3": {
      "type": "int",
      "defaultValue": 8506, 
       "metadata": { "description": "Application Port - Load balanced port that that your application needs " }
    },
    "loadBalancedAppPort4": {
      "type": "int",
      "defaultValue": 8507, 
       "metadata": { "description": "Application Port - Load balanced port that that your application needs " }
    },
    "loadBalancedAppPort5": {
      "type": "int",
      "defaultValue": 8081, 
       "metadata": { "description": "Application Port - Load balanced port that that your application needs " }
    },
    "loadBalancedAppPort6": {
      "type": "int",
      "defaultValue": 31000, 
       "metadata": { "description": "Application Port - Load balanced port that that your application needs " }
    },
    "maxPercentageUnhealthyApplications": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {"description": "Default Application health policy for the cluster"}
    },
    "maxPercentageUnhealthyNodes": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {"description": "Default Node health policy for the cluster"}
    },
    "maxPercentDeltaUnhealthyApplications": {
      "type": "int",
      "defaultValue": 100,
      "metadata": {"description": "Default delta health policy for the Applications running on the cluster"}
    },
    "maxPercentDeltaUnhealthyNodes": {
      "type": "int",
      "defaultValue": 100,
      "metadata": {"description": "Default delta health policy for the Nodes on the cluster"}
    },
    "storageAccountType": {
      "type": "string",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS"
      ],
      "defaultValue": "Standard_LRS"
    },
    "diagnosticStorageAccountType": {
      "type": "string",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS"
      ],
      "defaultValue": "Standard_LRS"
    }
  },
  "variables": {
    "computeLocation": "[parameters('clusterLocation')]",
    "dnsName": "[parameters('clusterName')]",
    "vmStorageAccountName": "[concat(parameters('clusterName'),'1')]",
    "diagnosticStorageAccountName": "[concat(parameters('clusterName'),'2')]",
    "vmName": "VM",
    "applicationStartPort": "20000",
    "applicationEndPort": "30000",
    "ephemeralStartPort": "49152",
    "ephemeralEndPort": "65534",
    "publicIPAddressName": "PublicIP-VM",
    "publicIPAddressType": "Dynamic",
    "vmStorageAccountContainerName": "vhds",
    "virtualNetworkName": "VNet",
    "addressPrefix": "10.0.0.0/16",
    "subnet1Name": "Subnet-1",
    "subnet2Name": "Subnet-2",
    "subnet1Prefix": "10.0.0.0/24",
    "subnet2Prefix": "10.0.1.0/24",
    "nicName": "NIC",
    "lbName": "LoadBalancer",
    "lbIPName": "PublicIP-LB-FE",
    "availSetName": "AvailabilitySet",
    "maxPercentUpgradeDomainDeltaUnhealthyNodes": 100,
    "vmImagePublisher": "MicrosoftWindowsServer",
    "vmImageOffer": "WindowsServer",
    "vmImageSku": "2012-R2-Datacenter",
    "vmImageVersion": "latest",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "subnet1Ref": "[concat(variables('vnetID'),'/subnets/',variables('subnet1Name'))]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('lbName'))]",
    "lbIPConfig": "[concat(variables('lbID'),'/frontendIPConfigurations/LoadBalancerIPConfig')]",
    "lbPoolID": "[concat(variables('lbID'),'/backendAddressPools/LoadBalancerBEAddressPool')]",
    "lbProbeID": "[concat(variables('lbID'),'/probes/FabricGatewayProbe')]",
    "lbHttpProbeID": "[concat(variables('lbID'),'/probes/FabricHttpGatewayProbe')]"
  },
  "resources": [
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('vmStorageAccountName')]",
      "location": "[variables('computeLocation')]",
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('diagnosticStorageAccountName')]",
      "location": "[variables('computeLocation')]",
      "properties": {
        "accountType": "[parameters('diagnosticStorageAccountType')]"
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availSetName')]",
      "location": "[variables('computeLocation')]"
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('lbIPName')]",
      "location": "[variables('computeLocation')]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('dnsName')]"
        },
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[variables('computeLocation')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnet1Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet1Prefix')]"
            }
          },
          {
            "name": "[variables('subnet2Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet2Prefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicName'),'-',copyIndex(0))]",
      "location": "[variables('computeLocation')]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('lbName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "IPConfig",
            "properties": {
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[variables('lbPoolID')]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('lbID'),'/inboundNatRules/RDP-VM-',copyIndex(0))]"
                }
              ],
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnet1Ref')]"
              }
            }
          }
        ]
      },
      "copy": {
        "name": "nicLoop",
        "count": 5
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmName'),copyIndex(0),'/ServiceFabricNode')]",
      "location": "[variables('computeLocation')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'), copyIndex(0))]"
      ],
      "properties": {
        "type": "ServiceFabricNode",
        "protectedSettings": {},
        "publisher": "Microsoft.Azure.ServiceFabric",
        "settings": {
          "clusterEndpoint": "[reference(parameters('clusterName')).clusterEndpoint]",
          "nodeTypeRef": "NodeType1"
        },
        "typeHandlerVersion": "1.0"
      },
      "copy": {
        "name": "vmExtensionLoop",
        "count": 5
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmName'),copyIndex(0))]",
      "location": "[variables('computeLocation')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/availabilitySets/', variables('availSetName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('vmStorageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', concat(variables('nicName'),'-',copyIndex(0)))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availSetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicName'),'-',copyIndex(0)))]"
            }
          ]
        },
        "osProfile": {
          "adminPassword": "[parameters('adminPassword')]",
          "adminUsername": "[parameters('adminUsername')]",
          "computername": "[concat(variables('vmName'),copyIndex(0))]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": false,
            "provisionVMAgent": true
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('vmImagePublisher')]",
            "offer": "[variables('vmImageOffer')]",
            "sku": "[variables('vmImageSku')]",
            "version": "[variables('vmImageVersion')]"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://',variables('vmStorageAccountName'),'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/',resourcegroup().name,'-',variables('vmName'),copyIndex(0),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        }
      },
      "copy": {
        "name": "vmLoop",
        "count": 5
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('lbName')]",
      "location": "[variables('computeLocation')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/',variables('lbIPName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerIPConfig",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('lbIPName'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "LoadBalancerBEAddressPool",
            "properties": {}
          }
        ],
        "inboundNatRules": [
          {
            "name": "RDP-VM-0",
            "properties": {
              "backendPort": "3389",
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig')]"
              },
              "frontendPort": "33000",
              "protocol": "tcp"
            }
          },
          {
            "name": "RDP-VM-1",
            "properties": {
              "backendPort": "3389",
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig')]"
              },
              "frontendPort": "33001",
              "protocol": "tcp"
            }
          },
          {
            "name": "RDP-VM-2",
            "properties": {
              "backendPort": "3389",
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig')]"
              },
              "frontendPort": "33002",
              "protocol": "tcp"
            }
          },
          {
            "name": "RDP-VM-3",
            "properties": {
              "backendPort": "3389",
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig')]"
              },
              "frontendPort": "33003",
              "protocol": "tcp"
            }
          },
          {
            "name": "RDP-VM-4",
            "properties": {
              "backendPort": "3389",
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig')]"
              },
              "frontendPort": "33004",
              "protocol": "tcp"
            }
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRule",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "backendPort": "[parameters('fabricTcpGatewayPort')]",
              "enableFloatingIP": "false",
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig')]"
              },
              "frontendPort": "[parameters('fabricTcpGatewayPort')]",
              "idleTimeoutInMinutes": "5",
              "probe": {
                "id": "[variables('lbProbeID')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "LBHttpRule",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "backendPort": "[parameters('fabricHttpGatewayPort')]",
              "enableFloatingIP": "false",
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig')]"
              },
              "frontendPort": "[parameters('fabricHttpGatewayPort')]",
              "idleTimeoutInMinutes": "5",
              "probe": {
                "id": "[variables('lbHttpProbeID')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "AppPortLBRule1",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "backendPort": "[parameters('loadBalancedAppPort1')]",
              "enableFloatingIP": "false",
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig')]"
              },
              "frontendPort": "[parameters('loadBalancedAppPort1')]",
              "idleTimeoutInMinutes": "5",
              "probe": {
                "id": "[concat(variables('lbID'),'/probes/AppPortProbe1')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "AppPortLBRule2",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "backendPort": "[parameters('loadBalancedAppPort2')]",
              "enableFloatingIP": "false",
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig')]"
              },
              "frontendPort": "[parameters('loadBalancedAppPort2')]",
              "idleTimeoutInMinutes": "5",
              "probe": {
                "id": "[concat(variables('lbID'),'/probes/AppPortProbe2')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "AppPortLBRule3",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "backendPort": "[parameters('loadBalancedAppPort3')]",
              "enableFloatingIP": "false",
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig')]"
              },
              "frontendPort": "[parameters('loadBalancedAppPort3')]",
              "idleTimeoutInMinutes": "5",
              "probe": {
                "id": "[concat(variables('lbID'),'/probes/AppPortProbe3')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "AppPortLBRule4",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "backendPort": "[parameters('loadBalancedAppPort4')]",
              "enableFloatingIP": "false",
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig')]"
              },
              "frontendPort": "[parameters('loadBalancedAppPort4')]",
              "idleTimeoutInMinutes": "5",
              "probe": {
                "id": "[concat(variables('lbID'),'/probes/AppPortProbe4')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "AppPortLBRule5",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "backendPort": "[parameters('loadBalancedAppPort5')]",
              "enableFloatingIP": "false",
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig')]"
              },
              "frontendPort": "[parameters('loadBalancedAppPort5')]",
              "idleTimeoutInMinutes": "5",
              "probe": {
                "id": "[concat(variables('lbID'),'/probes/AppPortProbe5')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "AppPortLBRule6",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "backendPort": "[parameters('loadBalancedAppPort6')]",
              "enableFloatingIP": "false",
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig')]"
              },
              "frontendPort": "[parameters('loadBalancedAppPort6')]",
              "idleTimeoutInMinutes": "5",
              "probe": {
                "id": "[concat(variables('lbID'),'/probes/AppPortProbe6')]"
              },
              "protocol": "tcp"
            }
          }
        ],
        "probes": [
          {
            "name": "FabricGatewayProbe",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[parameters('fabricTcpGatewayPort')]",
              "protocol": "tcp"
            }
          },
          {
            "name": "FabricHttpGatewayProbe",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[parameters('fabricHttpGatewayPort')]",
              "protocol": "tcp"
            }
          },
          {
            "name": "AppPortProbe1",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[parameters('loadBalancedAppPort1')]",
              "protocol": "tcp"
            }
          },
          {
            "name": "AppPortProbe2",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[parameters('loadBalancedAppPort2')]",
              "protocol": "tcp"
            }
          },
          {
            "name": "AppPortProbe3",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[parameters('loadBalancedAppPort3')]",
              "protocol": "tcp"
            }
          },
          {
            "name": "AppPortProbe4",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[parameters('loadBalancedAppPort4')]",
              "protocol": "tcp"
            }
          },
          {
            "name": "AppPortProbe5",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[parameters('loadBalancedAppPort5')]",
              "protocol": "tcp"
            }
          },
          {
            "name": "AppPortProbe6",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[parameters('loadBalancedAppPort6')]",
              "protocol": "tcp"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-01-01-alpha",
      "type": "Microsoft.ServiceFabric/clusters",
      "name": "[parameters('clusterName')]",
      "location": "[parameters('clusterLocation')]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('diagnosticStorageAccountName'))]"
      ],
      "properties": {
        "diagnosticsStorageAccountConfig": {
          "blobEndpoint": "[concat('https://',variables('diagnosticStorageAccountName'),'.blob.core.windows.net/')]",
          "primaryAccessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('diagnosticStorageAccountName')),'2015-05-01-preview').key1]",
          "queueEndpoint": "[concat('https://',variables('diagnosticStorageAccountName'),'.queue.core.windows.net/')]",
          "secondaryAccessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('diagnosticStorageAccountName')),'2015-05-01-preview').key2]",
          "storageAccountName": "[variables('diagnosticStorageAccountName')]",
          "tableEndpoint": "[concat('https://',variables('diagnosticStorageAccountName'),'.table.core.windows.net/')]"
        },
        "expectedVMResources": [
          {
            "name": "VM1",
            "nodeTypeRef": "NodeType1",
            "vmInstanceCount": 5
          }
        ],
        "fabricSettings": [],
        "managementEndpoint": "[concat('http://',reference(variables('lbIPName')).dnsSettings.fqdn,':',parameters('fabricHttpGatewayPort'))]",
        "nodeTypes": [
          {
            "name": "NodeType1",
            "applicationPorts": {
              "endPort": "[variables('applicationEndPort')]",
              "startPort": "[variables('applicationStartPort')]"
            },
            "clientConnectionEndpointPort": "[parameters('fabricTcpGatewayPort')]",
            "ephemeralPorts": {
              "endPort": "[variables('ephemeralEndPort')]",
              "startPort": "[variables('ephemeralStartPort')]"
            },
            "httpGatewayEndpointPort": "[parameters('fabricHttpGatewayPort')]"
          }
        ],
        "upgradeDescription": {
          "deltaHealthPolicy": {
            "maxPercentDeltaUnhealthyApplications": "[parameters('maxPercentDeltaUnhealthyApplications')]",
            "maxPercentDeltaUnhealthyNodes": "[parameters('maxPercentDeltaUnhealthyNodes')]",
            "maxPercentUpgradeDomainDeltaUnhealthyNodes": "[variables('maxPercentUpgradeDomainDeltaUnhealthyNodes')]"
          },
          "forceRestart": false,
          "healthCheckRetryTimeout": "00:05:00",
          "healthCheckStableDuration": "00:00:30",
          "healthCheckWaitDuration": "00:00:30",
          "healthPolicy": {
            "maxPercentUnhealthyApplications": "[parameters('maxPercentageUnhealthyApplications')]",
            "maxPercentUnhealthyNodes": "[parameters('maxPercentageUnhealthyNodes')]"
          },
          "overrideUserUpgradePolicy": false,
          "upgradeDomainTimeout": "00:15:00",
          "upgradeReplicaSetCheckTimeout": "00:10:00",
          "upgradeTimeout": "00:15:00"
        }
      }
    }
  ],
  "outputs": {
    "clusterProperties": {
      "value": "[reference(parameters('clusterName'))]",
      "type": "object"
    }
  }
}